server:
  port: 8080

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO

spring:
  datasource:
    username: postgres
    password: harekrishna
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://127.0.0.1:5432/inchl

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: 'true'
    hibernate:
      ddl-auto: update

  security:
    oauth2:
      client:
        registration:
          api-client-oidc:
            authorization-grant-type: authorization_code
            client-name: api-client-oidc
            client-secret: secret
            redirect-uri: '"http://127.0.0.1:8080/login/oauth2/code/{registrationId}"'
            provider: myprovider
            scope: openid
            client-id: api-client
          api-client-authorization-code:
            client-secret: secret
            client-name: api-client-authorization-code
            client-id: api-client
            provider: myprovider
            redirect-uri: "http://127.0.0.1:8080/authorized"
            authorization-grant-type: authorization_code
            scope: api.read
        provider:
          myprovider:
            issuer-uri: http://auth-server:9000
#
#
#  server.port=8080
#  spring.datasource.driver-class-name= org.postgresql.Driver
#  spring.datasource.username= postgres
#  spring.datasource.password= harekrishna
#  spring.datasource.url= jdbc:postgresql://127.0.0.1:5432/inchl
#  spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
#  spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#  spring.jpa.hibernate.ddl-auto= update
#
#  spring.security.oauth2.client.registration.api-client-oidc.provider= spring
#  spring.security.oauth2.client.registration.api-client-oidc.client-name= api-client-oidc
#  spring.security.oauth2.client.registration.api-client-oidc.client-id= api-client
#  spring.security.oauth2.client.registration.api-client-oidc.client-secret= secret
#  spring.security.oauth2.client.registration.api-client-oidc.authorization-grant-type= authorization_code
#  spring.security.oauth2.client.registration.api-client-oidc.redirect-uri= "http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
#  spring.security.oauth2.client.registration.api-client-oidc.scope= api.read
#
#  spring.security.oauth2.client.registration.api-client-authorization-code.provider= spring
#  spring.security.oauth2.client.registration.api-client-authorization-code.client-name= api-client-authorization-code
#  spring.security.oauth2.client.registration.api-client-authorization-code.client-id= api-client
#  spring.security.oauth2.client.registration.api-client-authorization-code.client-secret= secret
#  spring.security.oauth2.client.registration.api-client-authorization-code.authorization-grant-type= authorization_code
#  spring.security.oauth2.client.registration.api-client-authorization-code.redirect-uri= "http://127.0.0.1:8080/authorized"
#  spring.security.oauth2.client.registration.api-client-authorization-code.scope= api.read
#
#  spring.security.oauth2.client.provider.spring.issuer-uri= http://auth-server:9000
#
#
#
